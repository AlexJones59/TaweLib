buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.gradle:osdetector-gradle-plugin:1.6.0'
    }
}

plugins {
    id "org.sonarqube" version "2.6.2"
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'com.google.osdetector'

sourceCompatibility = JavaVersion.VERSION_1_10
targetCompatibility = JavaVersion.VERSION_1_10

ext.platform = osdetector.os == 'osx' ? 'mac' : osdetector.os == 'windows' ? 'win' : osdetector.os

repositories {
    mavenCentral()
}

dependencies {
    compile "org.openjfx:javafx-base:11:$platform"
    compile "org.openjfx:javafx-controls:11:$platform"
    compile "org.openjfx:javafx-fxml:11:$platform"
    compile "org.openjfx:javafx-graphics:11:$platform"
    compile "org.openjfx:javafx-media:11:$platform"
    compile "org.openjfx:javafx-web:11:$platform"
    compile "org.openjfx:javafx-swing:11:$platform"

    testImplementation 'junit:junit:4.12'

    /* uncomment for cross-platform jar:
    compile "org.openjfx:javafx-graphics:11:win"
    compile "org.openjfx:javafx-graphics:11:linux"
    compile "org.openjfx:javafx-graphics:11:mac"
    */
}

compileJava {
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
                '--add-modules', 'javafx.controls',
                '--add-modules', 'javafx.fxml',
                '--add-modules', 'javafx.web',
                '--add-modules', 'javafx.media'
        ]
    }
}

run {
    doFirst {
        jvmArgs = [
                '--module-path', classpath.asPath,
                '--add-modules', 'javafx.controls',
                '--add-modules', 'javafx.fxml',
                '--add-modules', 'javafx.web',
                '--add-modules', 'javafx.media'
        ]
    }
}

test {
    useJUnit()

    maxHeapSize = '1G'
}

sourceSets {
    main {
        resources {
            srcDirs = ["src/main/java"]
            includes = ["**/*.fxml"]
        }
    }
    test {
        resources {
            srcDirs = ["src/test/java"]
            includes = ["**/*Test.class"]
        }
    }
}

jar {
    manifest {
        attributes(
                'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Main-Class': 'com.tawelib.groupfive.Main'
        )
    }
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

javadoc {
    options.addStringOption('-module-path', classpath.asPath)
    options.addBooleanOption('html5', true)
    options.addStringOption('Xwerror', '-quiet')
    options.optionFiles << file('javadoc.options')
}

apply plugin: 'checkstyle'

checkstyle {
    toolVersion '8.14'
    configFile file("config/checkstyle.xml")
}

checkstyleMain {
    source = 'src/main/java/com/tawelib/groupfive'
}

checkstyleTest {
    source = 'src/main/java/com/tawelib/groupfive'
}

mainClassName = 'com.tawelib.groupfive.Main'
compileJava.options.encoding = 'UTF-8'